---
- name: Create ArgoCD namespace
  shell: |
    kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
  args:
    executable: /bin/bash
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Apply ArgoCD core manifests
  shell: |
    kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
  args:
    executable: /bin/bash
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Wait for ArgoCD pods to be ready
  shell: |
    kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
  args:
    executable: /bin/bash
  register: argocd_ready
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Patch ArgoCD server to use NodePort for testing
  shell: |
    kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'
  args:
    executable: /bin/bash
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Retrieve ArgoCD admin password
  shell: |
    kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 --decode
  args:
    executable: /bin/bash
  register: argocd_password
  changed_when: false
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Show ArgoCD admin password
  debug:
    msg: "üîê ArgoCD admin password: {{ argocd_password.stdout }}"

- name: Get ArgoCD server NodePort
  shell: |
    kubectl get svc argocd-server -n argocd -o=jsonpath="{.spec.ports[0].nodePort}"
  args:
    executable: /bin/bash
  register: argocd_port
  changed_when: false
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Show ArgoCD Web UI URL
  debug:
    msg: "üåê Access ArgoCD at http://<BASTION_PUBLIC_IP>:{{ argocd_port.stdout }} (Username: admin)"
