pipeline {
    agent any

    environment {
        DOCKERHUB_NAMESPACE = "nganeemmanuel/room8"
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/NganeEmmanuel/room8.git'
            }
        }

        stage('Build and Push Each Microservice') {
            steps {
                script {
                    def services = [
//                         "AuthService",
//                         "UserService",
                        "ServiceRegistry",
                        "ApiGateway"
//                         "BidService",
//                         "ListingService",
//                         "ContactService",
//                         "FeedbackService",
//                         "NotificationService",
//                         "SearchService"
                    ]

                    services.each { service ->
                        def image = "${DOCKERHUB_NAMESPACE.toLowerCase()}-${service.toLowerCase()}:latest"
                        def dockerfilePath = "backend/${service}/Dockerfile"
                        def contextPath = "backend/${service}"

                        echo "ðŸ“¦ Building image for ${service}..."
                        sh """
                          docker build -t ${image} -f ${dockerfilePath} ${contextPath}
                        """

                        echo "ðŸš€ Pushing image ${image}..."
                        withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                            sh """
                              echo $PASS | docker login -u $USER --password-stdin
                              docker push ${image}
                            """
                        }
                    }
                }
            }
        }

        stage('Trigger ArgoCD Sync') {
            steps {
                echo "ðŸ“¡ Triggering ArgoCD sync (placeholder)..."
                // todo implement webhook or CLI sync here.
                sh 'curl -X POST http://argocd-api/refresh-path' // Replace with actual ArgoCD sync logic
            }
        }
    }
}
